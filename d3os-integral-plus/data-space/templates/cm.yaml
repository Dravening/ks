apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "data-space.fullname" . }}
  labels:
    app: {{ template "data-space.fullname" . }}
    chart: '{{ .Chart.Name }}-{{ .Chart.Version }}'
    release: '{{ .Release.Name }}'
    heritage: '{{ .Release.Service }}'
data:
  database-realm.properties: |-
    # jdbc config
    jdbc.driver=com.mysql.cj.jdbc.Driver

    jdbc.url=jdbc:mysql://mysql-space.cosmoplat.svc:3306/datathread_dev?useSSL=false&autoReconnect=true&serverTimezone=GMT%2B8&rewriteBatchedStatements=true

    jdbc.username=d3os

    jdbc.password=d3os@cosmoplat


    # login config

    remoteurl=https://id.cosmoplat.com/d3uc/service

    loginflag=remote


    # OSS 单点登录标识 0 表示吴昊方式 1，表示天能方式

    ossflag=1
     # OSS 天能方式 秘钥
    access_secret=coe

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: '{{ template "data-space.fullname" . }}-web'
  labels:
    app: {{ template "data-space.fullname" . }}
    chart: '{{ .Chart.Name }}-{{ .Chart.Version }}'
    release: '{{ .Release.Name }}'
    heritage: '{{ .Release.Service }}'
data:
  HaierCasConfig.js: |-
    var qs = window.Qs;

    /**
     * Haier cas单点登录相关功能改造配置
     */

    window.HAIER_CONFIG = {
      // 是否开启cas方式
      CAS_IS_OPEN: true,
      //  cas的地址
      CAS_URL: "https://id.cosmoplat.com/d3uc/login/",
      // cas的query参数-重定向地址的key
      CAS_URL_PARAMS_REDIRECT: "redirect_url",
      // cas的query参数-类型的key
      CAS_URL_PARAMS_TYPE: "auto",
      CAS_URL_PARAMS_TYPE_GET: 1, // 获取token
      CAS_URL_PARAMS_TYPE_LOGOUT: 2, // 退出
      // cas平台返回的query参数-token的key
      CAS_RETURN_TOKEN_NAME: "access_token",
    };

    // 1.登录
    window.haierCasLogin = function () {
      if (window.HAIER_CONFIG.CAS_IS_OPEN) {
        gotoCasByType();
      }
    };

    // 2.刷新
    window.haierCasGet = async function () {
      if (window.HAIER_CONFIG.CAS_IS_OPEN) {
        const queryObj = qs.parse(location.search.slice(1));

        const isHavekey = Object.prototype.hasOwnProperty.call(
          queryObj,
          window.HAIER_CONFIG.CAS_RETURN_TOKEN_NAME
        );

        // 防止重复刷新跳转
        if (!isHavekey) {
          gotoCasByType(window.HAIER_CONFIG.CAS_URL_PARAMS_TYPE_GET);
        } else {
          await goToLoginOrigin(queryObj);
        }
      }
    };

    // 3.退出
    window.haierCasLogout = function () {
      if (window.HAIER_CONFIG.CAS_IS_OPEN) {
        gotoCasByType(window.HAIER_CONFIG.CAS_URL_PARAMS_TYPE_LOGOUT);
      }
    };

    // 跳转到cas页面 并区分类型
    function gotoCasByType(type) {
      if (window.HAIER_CONFIG.CAS_IS_OPEN) {
        const queryStr = qs.stringify({
          [window.HAIER_CONFIG.CAS_URL_PARAMS_REDIRECT]:
            window.location.origin + window.location.pathname,
          [window.HAIER_CONFIG.CAS_URL_PARAMS_TYPE]: type,
        });
        window.location.href = window.HAIER_CONFIG.CAS_URL + "?" + queryStr;
      }
    }

    // StreamSet特殊点   刷新即又去登录下
    async function goToLoginOrigin(queryObj) {
      const casToken = queryObj[window.HAIER_CONFIG.CAS_RETURN_TOKEN_NAME];

      const loginUrl = `/j_security_check?j_username=${casToken}&j_password=${casToken}`;
      // const loginUrl = `/j_security_check?j_username=${"admin"}&j_password=${"Cosmo_1!"}`;

      try {
        const res = await fetch(loginUrl, {
          method: "GET",
          redirect: "manual",
        });
        if (res.type === "opaqueredirect") {
          // 登录成功
          history.pushState(null, null, location.pathname);
        } else {
          // 登录失败
          alert("登录失败: 可能是用户不存在!");
          window.haierCasLogout();
        }
      } catch (error) {
        history.pushState(null, null, location.pathname);
        alert("本系统 登录接口 异常错误");
      }
    }
